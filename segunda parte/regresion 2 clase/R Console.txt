
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.70 (7612) x86_64-apple-darwin15.6.0]

[Workspace restored from /Users/nesdav/.RData]
[History restored from /Users/nesdav/.Rapp.history]

> valu4
Error: object 'valu4' not found
> install.packages("lmtest")
--- Please select a CRAN mirror for use in this session ---
Error in if (res > nrow(m)) { : argument is of length zero
> install.packages("normtest")
--- Please select a CRAN mirror for use in this session ---
Error in if (res > nrow(m)) { : argument is of length zero
> install.packages("randtest")
--- Please select a CRAN mirror for use in this session ---
Error in if (res > nrow(m)) { : argument is of length zero
> library(lmtest)
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(normtest)
> library(randtests)
> datos<-read.csv(file=file.choose(),header=T,sep=';')
> attach(datos)
The following object is masked _by_ .GlobalEnv:

    price

> head(datos)
           make price mpg headroom trunk weight length turn displacement gear_ratio  foreign num
1   AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58 Domestic   1
2     AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53 Domestic   2
3    AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08 Domestic   3
4 Buick Century  4816  20      4.5    16   3250    196   40          196       2.93 Domestic   4
5 Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41 Domestic   5
6 Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73 Domestic   6
objc[250]: Class FIFinderSyncExtensionHost is implemented in both /System/Library/PrivateFrameworks/FinderKit.framework/Versions/A/FinderKit (0x7fffab5f2210) and /System/Library/PrivateFrameworks/FileProvider.framework/OverrideBundles/FinderSyncCollaborationFileProviderOverride.bundle/Contents/MacOS/FinderSyncCollaborationFileProviderOverride (0x10a338dc8). One of the two will be used. Which one is undefined.
> correlationanalisis(Data[,2:length(Data)])
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘datos’:

    mpg

> scatter.smooth(x=mpg, y=price, main="Scatter plot")
Error in xy.coords(x, y, xlabel, ylabel) : 'x' and 'y' lengths differ
> price=datos$price
> scatter.smooth(x=mpg, y=price, main="Scatter plot")
Error in xy.coords(x, y, xlabel, ylabel) : 'x' and 'y' lengths differ
> mpg
# A tibble: 234 x 11
   manufacturer model      displ  year   cyl trans      drv     cty   hwy fl    class  
   <chr>        <chr>      <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr>  
 1 audi         a4           1.8  1999     4 auto(l5)   f        18    29 p     compact
 2 audi         a4           1.8  1999     4 manual(m5) f        21    29 p     compact
 3 audi         a4           2    2008     4 manual(m6) f        20    31 p     compact
 4 audi         a4           2    2008     4 auto(av)   f        21    30 p     compact
 5 audi         a4           2.8  1999     6 auto(l5)   f        16    26 p     compact
 6 audi         a4           2.8  1999     6 manual(m5) f        18    26 p     compact
 7 audi         a4           3.1  2008     6 auto(av)   f        18    27 p     compact
 8 audi         a4 quattro   1.8  1999     4 manual(m5) 4        18    26 p     compact
 9 audi         a4 quattro   1.8  1999     4 auto(l5)   4        16    25 p     compact
10 audi         a4 quattro   2    2008     4 manual(m6) 4        20    28 p     compact
# … with 224 more rows
> datos
                make price mpg headroom trunk weight length turn displacement gear_ratio  foreign num
1        AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58 Domestic   1
2          AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53 Domestic   2
3         AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08 Domestic   3
4      Buick Century  4816  20      4.5    16   3250    196   40          196       2.93 Domestic   4
5      Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41 Domestic   5
6      Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73 Domestic   6
7         Buick Opel  4453  26      3.0    10   2230    170   34          304       2.87 Domestic   7
8        Buick Regal  5189  20      2.0    16   3280    200   42          196       2.93 Domestic   8
9      Buick Riviera 10372  16      3.5    17   3880    207   43          231       2.93 Domestic   9
10     Buick Skylark  4082  19      3.5    13   3400    200   42          231       3.08 Domestic  10
11      Cad. Deville 11385  14      4.0    20   4330    221   44          425       2.28 Domestic  11
12     Cad. Eldorado 14500  14      3.5    16   3900    204   43          350       2.19 Domestic  12
13      Cad. Seville 15906  21      3.0    13   4290    204   45          350       2.24 Domestic  13
14    Chev. Chevette  3299  29      2.5     9   2110    163   34          231       2.93 Domestic  14
15      Chev. Impala  5705  16      4.0    20   3690    212   43          250       2.56 Domestic  15
16      Chev. Malibu  4504  22      3.5    17   3180    193   31          200       2.73 Domestic  16
17 Chev. Monte Carlo  5104  22      2.0    16   3220    200   41          200       2.73 Domestic  17
18       Chev. Monza  3667  24      2.0     7   2750    179   40          151       2.73 Domestic  18
19        Chev. Nova  3955  19      3.5    13   3430    197   43          250       2.56 Domestic  19
20        Dodge Colt  3984  30      2.0     8   2120    163   35           98       3.54 Domestic  20
21    Dodge Diplomat  4010  18      4.0    17   3600    206   46          318       2.47 Domestic  21
22      Dodge Magnum  5886  16      4.0    17   3600    206   46          318       2.47 Domestic  22
23   Dodge St. Regis  6342  17      4.5    21   3740    220   46          225       2.94 Domestic  23
24       Ford Fiesta  4389  28      1.5     9   1800    147   33           98       3.15 Domestic  24
25      Ford Mustang  4187  21      2.0    10   2650    179   43          140       3.08 Domestic  25
26 Linc. Continental 11497  12      3.5    22   4840    233   51          400       2.47 Domestic  26
27      Linc. Mark V 13594  12      2.5    18   4720    230   48          400       2.47 Domestic  27
28  Linc. Versailles 13466  14      3.5    15   3830    201   41          302       2.47 Domestic  28
29      Merc. Bobcat  3829  22      3.0     9   2580    169   39          140       2.73 Domestic  29
30      Merc. Cougar  5379  14      3.5    16   4060    221   48          302       2.75 Domestic  30
31     Merc. Marquis  6165  15      3.5    23   3720    212   44          302       2.26 Domestic  31
32     Merc. Monarch  4516  18      3.0    15   3370    198   41          250       2.43 Domestic  32
33        Merc. XR-7  6303  14      3.0    16   4130    217   45          302       2.75 Domestic  33
34      Merc. Zephyr  3291  20      3.5    17   2830    195   43          140       3.08 Domestic  34
35           Olds 98  8814  21      4.0    20   4060    220   43          350       2.41 Domestic  35
36    Olds Cutl Supr  5172  19      2.0    16   3310    198   42          231       2.93 Domestic  36
37      Olds Cutlass  4733  19      4.5    16   3300    198   42          231       2.93 Domestic  37
38     Olds Delta 88  4890  18      4.0    20   3690    218   42          231       2.73 Domestic  38
39        Olds Omega  4181  19      4.5    14   3370    200   43          231       3.08 Domestic  39
40     Olds Starfire  4195  24      2.0    10   2730    180   40          151       2.73 Domestic  40
41     Olds Toronado 10371  16      3.5    17   4030    206   43          350       2.41 Domestic  41
42       Plym. Arrow  4647  28      2.0    11   3260    170   37          156       3.05 Domestic  42
43       Plym. Champ  4425  34      2.5    11   1800    157   37           86       2.97 Domestic  43
44     Plym. Horizon  4482  25      4.0    17   2200    165   36          105       3.37 Domestic  44
45     Plym. Sapporo  6486  26      1.5     8   2520    182   38          119       3.54 Domestic  45
46      Plym. Volare  4060  18      5.0    16   3330    201   44          225       3.23 Domestic  46
47    Pont. Catalina  5798  18      4.0    20   3700    214   42          231       2.73 Domestic  47
48    Pont. Firebird  4934  18      1.5     7   3470    198   42          231       3.08 Domestic  48
49  Pont. Grand Prix  5222  19      2.0    16   3210    201   45          231       2.93 Domestic  49
50     Pont. Le Mans  4723  19      3.5    17   3200    199   40          231       2.93 Domestic  50
51     Pont. Phoenix  4424  19      3.5    13   3420    203   43          231       3.08 Domestic  51
52     Pont. Sunbird  4172  24      2.0     7   2690    179   41          151       2.73 Domestic  52
53         Audi 5000  9690  17      3.0    15   2830    189   37          131       3.20  Foreign  53
54          Audi Fox  6295  23      2.5    11   2070    174   36           97       3.70  Foreign  54
55          BMW 320i  9735  25      2.5    12   2650    177   34          121       3.64  Foreign  55
56        Datsun 200  6229  23      1.5     6   2370    170   35          119       3.89  Foreign  56
57        Datsun 210  4589  35      2.0     8   2020    165   32           85       3.70  Foreign  57
58        Datsun 510  5079  24      2.5     8   2280    170   34          119       3.54  Foreign  58
59        Datsun 810  8129  21      2.5     8   2750    184   38          146       3.55  Foreign  59
60       Fiat Strada  4296  21      2.5    16   2130    161   36          105       3.37  Foreign  60
61      Honda Accord  5799  25      3.0    10   2240    172   36          107       3.05  Foreign  61
62       Honda Civic  4499  28      2.5     5   1760    149   34           91       3.30  Foreign  62
63         Mazda GLC  3995  30      3.5    11   1980    154   33           86       3.73  Foreign  63
64       Peugeot 604 12990  14      3.5    14   3420    192   38          163       3.58  Foreign  64
65    Renault Le Car  3895  26      3.0    10   1830    142   34           79       3.72  Foreign  65
66            Subaru  3798  35      2.5    11   2050    164   36           97       3.81  Foreign  66
67     Toyota Celica  5899  18      2.5    14   2410    174   36          134       3.06  Foreign  67
68    Toyota Corolla  3748  31      3.0     9   2200    165   35           97       3.21  Foreign  68
69     Toyota Corona  5719  18      2.0    11   2670    175   36          134       3.05  Foreign  69
70         VW Dasher  7140  23      2.5    12   2160    172   36           97       3.74  Foreign  70
71         VW Diesel  5397  41      3.0    15   2040    155   35           90       3.78  Foreign  71
72         VW Rabbit  4697  25      3.0    15   1930    155   35           89       3.78  Foreign  72
73       VW Scirocco  6850  25      2.0    16   1990    156   36           97       3.78  Foreign  73
74         Volvo 260 11995  17      2.5    14   3170    193   37          163       2.98  Foreign  74
> attach(datos)
The following object is masked _by_ .GlobalEnv:

    price

The following object is masked from package:ggplot2:

    mpg

The following objects are masked from datos (pos = 5):

    displacement, foreign, gear_ratio, headroom, length, make, mpg, num, price, trunk, turn, weight

> head(datos)
           make price mpg headroom trunk weight length turn displacement gear_ratio  foreign num
1   AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58 Domestic   1
2     AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53 Domestic   2
3    AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08 Domestic   3
4 Buick Century  4816  20      4.5    16   3250    196   40          196       2.93 Domestic   4
5 Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41 Domestic   5
6 Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73 Domestic   6
> mpg
 [1] 22 17 22 20 15 18 26 20 16 19 14 14 21 29 16 22 22 24 19 30 18 16 17 28 21 12 12 14 22 14 15 18 14 20 21 19
[37] 19 18 19 24 16 28 34 25 26 18 18 18 19 19 19 24 17 23 25 23 35 24 21 21 25 28 30 14 26 35 18 31 18 23 41 25
[73] 25 17
> scatter.smooth(x=headroom, y=price, main="Scatter plot")
> scatter.smooth(x=mpg, y=log(price), main="Scatter plot")
> scatter.smooth(x=log(mpg), y=log(price), main="Scatter plot")
> datos
                make price mpg headroom trunk weight length turn displacement gear_ratio  foreign num
1        AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58 Domestic   1
2          AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53 Domestic   2
3         AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08 Domestic   3
4      Buick Century  4816  20      4.5    16   3250    196   40          196       2.93 Domestic   4
5      Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41 Domestic   5
6      Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73 Domestic   6
7         Buick Opel  4453  26      3.0    10   2230    170   34          304       2.87 Domestic   7
8        Buick Regal  5189  20      2.0    16   3280    200   42          196       2.93 Domestic   8
9      Buick Riviera 10372  16      3.5    17   3880    207   43          231       2.93 Domestic   9
10     Buick Skylark  4082  19      3.5    13   3400    200   42          231       3.08 Domestic  10
11      Cad. Deville 11385  14      4.0    20   4330    221   44          425       2.28 Domestic  11
12     Cad. Eldorado 14500  14      3.5    16   3900    204   43          350       2.19 Domestic  12
13      Cad. Seville 15906  21      3.0    13   4290    204   45          350       2.24 Domestic  13
14    Chev. Chevette  3299  29      2.5     9   2110    163   34          231       2.93 Domestic  14
15      Chev. Impala  5705  16      4.0    20   3690    212   43          250       2.56 Domestic  15
16      Chev. Malibu  4504  22      3.5    17   3180    193   31          200       2.73 Domestic  16
17 Chev. Monte Carlo  5104  22      2.0    16   3220    200   41          200       2.73 Domestic  17
18       Chev. Monza  3667  24      2.0     7   2750    179   40          151       2.73 Domestic  18
19        Chev. Nova  3955  19      3.5    13   3430    197   43          250       2.56 Domestic  19
20        Dodge Colt  3984  30      2.0     8   2120    163   35           98       3.54 Domestic  20
21    Dodge Diplomat  4010  18      4.0    17   3600    206   46          318       2.47 Domestic  21
22      Dodge Magnum  5886  16      4.0    17   3600    206   46          318       2.47 Domestic  22
23   Dodge St. Regis  6342  17      4.5    21   3740    220   46          225       2.94 Domestic  23
24       Ford Fiesta  4389  28      1.5     9   1800    147   33           98       3.15 Domestic  24
25      Ford Mustang  4187  21      2.0    10   2650    179   43          140       3.08 Domestic  25
26 Linc. Continental 11497  12      3.5    22   4840    233   51          400       2.47 Domestic  26
27      Linc. Mark V 13594  12      2.5    18   4720    230   48          400       2.47 Domestic  27
28  Linc. Versailles 13466  14      3.5    15   3830    201   41          302       2.47 Domestic  28
29      Merc. Bobcat  3829  22      3.0     9   2580    169   39          140       2.73 Domestic  29
30      Merc. Cougar  5379  14      3.5    16   4060    221   48          302       2.75 Domestic  30
31     Merc. Marquis  6165  15      3.5    23   3720    212   44          302       2.26 Domestic  31
32     Merc. Monarch  4516  18      3.0    15   3370    198   41          250       2.43 Domestic  32
33        Merc. XR-7  6303  14      3.0    16   4130    217   45          302       2.75 Domestic  33
34      Merc. Zephyr  3291  20      3.5    17   2830    195   43          140       3.08 Domestic  34
35           Olds 98  8814  21      4.0    20   4060    220   43          350       2.41 Domestic  35
36    Olds Cutl Supr  5172  19      2.0    16   3310    198   42          231       2.93 Domestic  36
37      Olds Cutlass  4733  19      4.5    16   3300    198   42          231       2.93 Domestic  37
38     Olds Delta 88  4890  18      4.0    20   3690    218   42          231       2.73 Domestic  38
39        Olds Omega  4181  19      4.5    14   3370    200   43          231       3.08 Domestic  39
40     Olds Starfire  4195  24      2.0    10   2730    180   40          151       2.73 Domestic  40
41     Olds Toronado 10371  16      3.5    17   4030    206   43          350       2.41 Domestic  41
42       Plym. Arrow  4647  28      2.0    11   3260    170   37          156       3.05 Domestic  42
43       Plym. Champ  4425  34      2.5    11   1800    157   37           86       2.97 Domestic  43
44     Plym. Horizon  4482  25      4.0    17   2200    165   36          105       3.37 Domestic  44
45     Plym. Sapporo  6486  26      1.5     8   2520    182   38          119       3.54 Domestic  45
46      Plym. Volare  4060  18      5.0    16   3330    201   44          225       3.23 Domestic  46
47    Pont. Catalina  5798  18      4.0    20   3700    214   42          231       2.73 Domestic  47
48    Pont. Firebird  4934  18      1.5     7   3470    198   42          231       3.08 Domestic  48
49  Pont. Grand Prix  5222  19      2.0    16   3210    201   45          231       2.93 Domestic  49
50     Pont. Le Mans  4723  19      3.5    17   3200    199   40          231       2.93 Domestic  50
51     Pont. Phoenix  4424  19      3.5    13   3420    203   43          231       3.08 Domestic  51
52     Pont. Sunbird  4172  24      2.0     7   2690    179   41          151       2.73 Domestic  52
53         Audi 5000  9690  17      3.0    15   2830    189   37          131       3.20  Foreign  53
54          Audi Fox  6295  23      2.5    11   2070    174   36           97       3.70  Foreign  54
55          BMW 320i  9735  25      2.5    12   2650    177   34          121       3.64  Foreign  55
56        Datsun 200  6229  23      1.5     6   2370    170   35          119       3.89  Foreign  56
57        Datsun 210  4589  35      2.0     8   2020    165   32           85       3.70  Foreign  57
58        Datsun 510  5079  24      2.5     8   2280    170   34          119       3.54  Foreign  58
59        Datsun 810  8129  21      2.5     8   2750    184   38          146       3.55  Foreign  59
60       Fiat Strada  4296  21      2.5    16   2130    161   36          105       3.37  Foreign  60
61      Honda Accord  5799  25      3.0    10   2240    172   36          107       3.05  Foreign  61
62       Honda Civic  4499  28      2.5     5   1760    149   34           91       3.30  Foreign  62
63         Mazda GLC  3995  30      3.5    11   1980    154   33           86       3.73  Foreign  63
64       Peugeot 604 12990  14      3.5    14   3420    192   38          163       3.58  Foreign  64
65    Renault Le Car  3895  26      3.0    10   1830    142   34           79       3.72  Foreign  65
66            Subaru  3798  35      2.5    11   2050    164   36           97       3.81  Foreign  66
67     Toyota Celica  5899  18      2.5    14   2410    174   36          134       3.06  Foreign  67
68    Toyota Corolla  3748  31      3.0     9   2200    165   35           97       3.21  Foreign  68
69     Toyota Corona  5719  18      2.0    11   2670    175   36          134       3.05  Foreign  69
70         VW Dasher  7140  23      2.5    12   2160    172   36           97       3.74  Foreign  70
71         VW Diesel  5397  41      3.0    15   2040    155   35           90       3.78  Foreign  71
72         VW Rabbit  4697  25      3.0    15   1930    155   35           89       3.78  Foreign  72
73       VW Scirocco  6850  25      2.0    16   1990    156   36           97       3.78  Foreign  73
74         Volvo 260 11995  17      2.5    14   3170    193   37          163       2.98  Foreign  74
>    Data <- subset( datos, select = -foreign ) ##saco la var long por que no aporta nada
>     head(Data)
           make price mpg headroom trunk weight length turn displacement gear_ratio num
1   AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58   1
2     AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53   2
3    AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08   3
4 Buick Century  4816  20      4.5    16   3250    196   40          196       2.93   4
5 Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41   5
6 Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73   6
> Data[,2:length(Data)]
   price mpg headroom trunk weight length turn displacement gear_ratio num
1   4099  22      2.5    11   2930    186   40          121       3.58   1
2   4749  17      3.0    11   3350    173   40          258       2.53   2
3   3799  22      3.0    12   2640    168   35          121       3.08   3
4   4816  20      4.5    16   3250    196   40          196       2.93   4
5   7827  15      4.0    20   4080    222   43          350       2.41   5
6   5788  18      4.0    21   3670    218   43          231       2.73   6
7   4453  26      3.0    10   2230    170   34          304       2.87   7
8   5189  20      2.0    16   3280    200   42          196       2.93   8
9  10372  16      3.5    17   3880    207   43          231       2.93   9
10  4082  19      3.5    13   3400    200   42          231       3.08  10
11 11385  14      4.0    20   4330    221   44          425       2.28  11
12 14500  14      3.5    16   3900    204   43          350       2.19  12
13 15906  21      3.0    13   4290    204   45          350       2.24  13
14  3299  29      2.5     9   2110    163   34          231       2.93  14
15  5705  16      4.0    20   3690    212   43          250       2.56  15
16  4504  22      3.5    17   3180    193   31          200       2.73  16
17  5104  22      2.0    16   3220    200   41          200       2.73  17
18  3667  24      2.0     7   2750    179   40          151       2.73  18
19  3955  19      3.5    13   3430    197   43          250       2.56  19
20  3984  30      2.0     8   2120    163   35           98       3.54  20
21  4010  18      4.0    17   3600    206   46          318       2.47  21
22  5886  16      4.0    17   3600    206   46          318       2.47  22
23  6342  17      4.5    21   3740    220   46          225       2.94  23
24  4389  28      1.5     9   1800    147   33           98       3.15  24
25  4187  21      2.0    10   2650    179   43          140       3.08  25
26 11497  12      3.5    22   4840    233   51          400       2.47  26
27 13594  12      2.5    18   4720    230   48          400       2.47  27
28 13466  14      3.5    15   3830    201   41          302       2.47  28
29  3829  22      3.0     9   2580    169   39          140       2.73  29
30  5379  14      3.5    16   4060    221   48          302       2.75  30
31  6165  15      3.5    23   3720    212   44          302       2.26  31
32  4516  18      3.0    15   3370    198   41          250       2.43  32
33  6303  14      3.0    16   4130    217   45          302       2.75  33
34  3291  20      3.5    17   2830    195   43          140       3.08  34
35  8814  21      4.0    20   4060    220   43          350       2.41  35
36  5172  19      2.0    16   3310    198   42          231       2.93  36
37  4733  19      4.5    16   3300    198   42          231       2.93  37
38  4890  18      4.0    20   3690    218   42          231       2.73  38
39  4181  19      4.5    14   3370    200   43          231       3.08  39
40  4195  24      2.0    10   2730    180   40          151       2.73  40
41 10371  16      3.5    17   4030    206   43          350       2.41  41
42  4647  28      2.0    11   3260    170   37          156       3.05  42
43  4425  34      2.5    11   1800    157   37           86       2.97  43
44  4482  25      4.0    17   2200    165   36          105       3.37  44
45  6486  26      1.5     8   2520    182   38          119       3.54  45
46  4060  18      5.0    16   3330    201   44          225       3.23  46
47  5798  18      4.0    20   3700    214   42          231       2.73  47
48  4934  18      1.5     7   3470    198   42          231       3.08  48
49  5222  19      2.0    16   3210    201   45          231       2.93  49
50  4723  19      3.5    17   3200    199   40          231       2.93  50
51  4424  19      3.5    13   3420    203   43          231       3.08  51
52  4172  24      2.0     7   2690    179   41          151       2.73  52
53  9690  17      3.0    15   2830    189   37          131       3.20  53
54  6295  23      2.5    11   2070    174   36           97       3.70  54
55  9735  25      2.5    12   2650    177   34          121       3.64  55
56  6229  23      1.5     6   2370    170   35          119       3.89  56
57  4589  35      2.0     8   2020    165   32           85       3.70  57
58  5079  24      2.5     8   2280    170   34          119       3.54  58
59  8129  21      2.5     8   2750    184   38          146       3.55  59
60  4296  21      2.5    16   2130    161   36          105       3.37  60
61  5799  25      3.0    10   2240    172   36          107       3.05  61
62  4499  28      2.5     5   1760    149   34           91       3.30  62
63  3995  30      3.5    11   1980    154   33           86       3.73  63
64 12990  14      3.5    14   3420    192   38          163       3.58  64
65  3895  26      3.0    10   1830    142   34           79       3.72  65
66  3798  35      2.5    11   2050    164   36           97       3.81  66
67  5899  18      2.5    14   2410    174   36          134       3.06  67
68  3748  31      3.0     9   2200    165   35           97       3.21  68
69  5719  18      2.0    11   2670    175   36          134       3.05  69
70  7140  23      2.5    12   2160    172   36           97       3.74  70
71  5397  41      3.0    15   2040    155   35           90       3.78  71
72  4697  25      3.0    15   1930    155   35           89       3.78  72
73  6850  25      2.0    16   1990    156   36           97       3.78  73
74 11995  17      2.5    14   3170    193   37          163       2.98  74
>     x=Data[,2:length(Data)]
> for (i in 1:length(x)) {   ##transformar datos a datos positivos 
+  x[i] = (x[i]-min(x[i]))/(max(x[i])-min(x[i]))  #para poner todos los datos de 0 a 1 
+ }
>   head(x)
       price       mpg  headroom     trunk    weight    length turn displacement gear_ratio        num
1 0.06405073 0.3448276 0.2857143 0.3333333 0.3798701 0.4835165 0.45    0.1213873  0.8176471 0.00000000
2 0.11557669 0.1724138 0.4285714 0.3333333 0.5162338 0.3406593 0.45    0.5173410  0.2000000 0.01369863
3 0.04026952 0.3448276 0.4285714 0.3888889 0.2857143 0.2857143 0.20    0.1213873  0.5235294 0.02739726
4 0.12088783 0.2758621 0.8571429 0.6111111 0.4837662 0.5934066 0.45    0.3381503  0.4352941 0.04109589
5 0.35957194 0.1034483 0.7142857 0.8333333 0.7532468 0.8791209 0.60    0.7832370  0.1294118 0.05479452
6 0.19793896 0.2068966 0.7142857 0.8888889 0.6201299 0.8351648 0.60    0.4393064  0.3176471 0.06849315
>     summary(x)
     price              mpg            headroom          trunk            weight           length      
 Min.   :0.00000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.07366   1st Qu.:0.2069   1st Qu.:0.2857   1st Qu.:0.2917   1st Qu.:0.1591   1st Qu.:0.3077  
 Median :0.13599   Median :0.2759   Median :0.4286   Median :0.5000   Median :0.4643   Median :0.5549  
 Mean   :0.22784   Mean   :0.3206   Mean   :0.4266   Mean   :0.4865   Mean   :0.4089   Mean   :0.5048  
 3rd Qu.:0.24108   3rd Qu.:0.4397   3rd Qu.:0.5714   3rd Qu.:0.6528   3rd Qu.:0.5974   3rd Qu.:0.6786  
 Max.   :1.00000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
      turn         displacement      gear_ratio          num      
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.00  
 1st Qu.:0.2500   1st Qu.:0.1156   1st Qu.:0.3176   1st Qu.:0.25  
 Median :0.4500   Median :0.3382   Median :0.4500   Median :0.50  
 Mean   :0.4324   Mean   :0.3419   Mean   :0.4852   Mean   :0.50  
 3rd Qu.:0.6000   3rd Qu.:0.4805   3rd Qu.:0.6838   3rd Qu.:0.75  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.00  
>     x=x+1
>     correlationanalisis(x)
>    xlog=log(x)
> fa.parallel(xlog)         
Error in fa.parallel(xlog) : could not find function "fa.parallel"
> KMO(xlog)
Error in KMO(xlog) : could not find function "KMO"
> library(factanal)
Error in library(factanal) : there is no package called ‘factanal’
> library(factoextra)
Welcome! Related Books: `Practical Guide To Cluster Analysis in R` at https://goo.gl/13EFCZ
> library(psy)
> library(nFactors)
Loading required package: MASS
Loading required package: psych

Attaching package: ‘psych’

The following object is masked from ‘package:psy’:

    wkappa

The following objects are masked from ‘package:ggplot2’:

    %+%, alpha

Loading required package: boot

Attaching package: ‘boot’

The following object is masked from ‘package:psych’:

    logit

Loading required package: lattice

Attaching package: ‘lattice’

The following object is masked from ‘package:boot’:

    melanoma


Attaching package: ‘nFactors’

The following object is masked from ‘package:lattice’:

    parallel

> library(GPArotation)
> library(Rgraphviz)
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, parApply,
    parCapply, parLapply, parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colMeans, colnames, colSums, dirname,
    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,
    Position, rank, rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: grid
> library(stats)
> library(lmtest)
> library(normtest)
> library(randtests)
> library(car)
Loading required package: carData

Attaching package: ‘car’

The following object is masked from ‘package:Rgraphviz’:

    sp

The following object is masked from ‘package:boot’:

    logit

The following object is masked from ‘package:psych’:

    logit

> library(EnvStats)

Attaching package: ‘EnvStats’

The following object is masked from ‘package:car’:

    qqPlot

The following object is masked from ‘package:MASS’:

    boxcox

The following objects are masked from ‘package:stats’:

    predict, predict.lm

The following object is masked from ‘package:base’:

    print.default

> fa.parallel(xlog)         
Parallel analysis suggests that the number of factors =  1  and the number of components =  1 
> KMO(xlog)
Kaiser-Meyer-Olkin factor adequacy
Call: KMO(r = xlog)
Overall MSA =  0.89
MSA for each item = 
       price          mpg     headroom        trunk       weight       length         turn displacement 
        0.74         0.97         0.82         0.88         0.87         0.88         0.94         0.91 
  gear_ratio          num 
        0.89         0.87 
> cortest.bartlett(xlog)
R was not square, finding R from data
$chisq
[1] 699.1394

$p.value
[1] 3.312644e-118

$df
[1] 45

>  powerTransform(values[,1])	
Error in powerTransform(values[, 1]) : object 'values' not found
>   lam= -0.3533898 
> valu1=  boxcoxTransform(values[,1],lam)
Error in boxcoxTransform(values[, 1], lam) : object 'values' not found
>   shapiro.test(valu1)
Error in is.numeric(x) : object 'valu1' not found
>  shapiro.test(log(values[,2]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,2])	
Error in powerTransform(values[, 2]) : object 'values' not found
>   lam=   0.6197182 
> valu2=  boxcoxTransform(values[,2],lam) 
Error in boxcoxTransform(values[, 2], lam) : object 'values' not found
>     shapiro.test(valu2)
Error in is.numeric(x) : object 'valu2' not found
> ks.test(valu2,pnorm,mean(valu2),sd(valu2))
Error in ks.test(valu2, pnorm, mean(valu2), sd(valu2)) : 
  object 'valu2' not found
> 
>   
>    powerTransform(values[,3])	
Error in powerTransform(values[, 3]) : object 'values' not found
>   lam= 0.8142939
> valu3=  boxcoxTransform(values[,3],lam)
Error in boxcoxTransform(values[, 3], lam) : object 'values' not found
>   shapiro.test(valu3)
Error in is.numeric(x) : object 'valu3' not found
> shapiro.test(values[,4])
Error in is.numeric(x) : object 'values' not found
>   shapiro.test(log(values[,4]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,4])	
Error in powerTransform(values[, 4]) : object 'values' not found
>   lam=   0.5026624
> valu4=  boxcoxTransform(values[,4],lam) 
Error in boxcoxTransform(values[, 4], lam) : object 'values' not found
>     shapiro.test(valu4)
Error in is.numeric(x) : object 'valu4' not found
> ks.test(valu4,pnorm,mean(valu4),sd(valu4))
Error in ks.test(valu4, pnorm, mean(valu4), sd(valu4)) : 
  object 'valu4' not found
> 
> i=5
> shapiro.test(values[,i])
Error in is.numeric(x) : object 'values' not found
> valu5=values[,5]
Error: object 'values' not found
> 
> 
> i=6
> shapiro.test(values[,i])
Error in is.numeric(x) : object 'values' not found
>   shapiro.test(log(values[,i]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,i])	
Error in powerTransform(values[, i]) : object 'values' not found
>   lam=     0.2986733 
> valu6=  boxcoxTransform(values[,i],lam) 
Error in boxcoxTransform(values[, i], lam) : object 'values' not found
>     shapiro.test(valu6)
Error in is.numeric(x) : object 'valu6' not found
> ks.test(valu6,pnorm,mean(valu6),sd(valu6))
Error in ks.test(valu6, pnorm, mean(valu6), sd(valu6)) : 
  object 'valu6' not found
> 
> i=7
> shapiro.test(values[,i])
Error in is.numeric(x) : object 'values' not found
>   shapiro.test(log(values[,i]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,i])	
Error in powerTransform(values[, i]) : object 'values' not found
>   lam=    0.001216884
> valu7=  boxcoxTransform(values[,i],lam) 
Error in boxcoxTransform(values[, i], lam) : object 'values' not found
>     shapiro.test(valu7)
Error in is.numeric(x) : object 'valu7' not found
> ks.test(valu7,pnorm,mean(valu7),sd(valu7))
Error in ks.test(valu7, pnorm, mean(valu7), sd(valu7)) : 
  object 'valu7' not found
> 
> i=8
> shapiro.test(values[,i])
Error in is.numeric(x) : object 'values' not found
>   shapiro.test(log(values[,i]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,i])	
Error in powerTransform(values[, i]) : object 'values' not found
>   lam=   0.09708738
> valu8=  boxcoxTransform(values[,i],lam) 
Error in boxcoxTransform(values[, i], lam) : object 'values' not found
>     shapiro.test(valu8)
Error in is.numeric(x) : object 'valu8' not found
> ks.test(valu8,pnorm,mean(valu8),sd(valu8))
Error in ks.test(valu8, pnorm, mean(valu8), sd(valu8)) : 
  object 'valu8' not found
> 
> i=9
> shapiro.test(values[,i])
Error in is.numeric(x) : object 'values' not found
>   shapiro.test(log(values[,i]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(values[,i])	
Error in powerTransform(values[, i]) : object 'values' not found
>   lam=    0.7186669
> valu9=  boxcoxTransform(values[,i],lam) 
Error in boxcoxTransform(values[, i], lam) : object 'values' not found
>     shapiro.test(valu9)
Error in is.numeric(x) : object 'valu9' not found
> ks.test(valu9,pnorm,mean(valu9),sd(valu9))
Error in ks.test(valu9, pnorm, mean(valu9), sd(valu9)) : 
  object 'valu9' not found
> 
> shapiro.test(price)

	Shapiro-Wilk normality test

data:  price
W = 0.76696, p-value = 1.724e-09

>   shapiro.test(log(values[,i]))
Error in is.numeric(x) : object 'values' not found
>   powerTransform(price)	
Estimated transformation parameter 
    price 
-1.436082 
>   lam= -1.436082     
> price=  boxcoxTransform(price,lam) 
>     shapiro.test(price)

	Shapiro-Wilk normality test

data:  price
W = 0.96707, p-value = 0.05052

> ks.test(price,pnorm,mean(price),sd(price))

	One-sample Kolmogorov-Smirnov test

data:  price
D = 0.079854, p-value = 0.7025
alternative hypothesis: two-sided

> 
> valuesbox=data.frame(valu1,valu2,valu3,valu4,valu5,valu6,valu7,valu8,valu9)
Error in data.frame(valu1, valu2, valu3, valu4, valu5, valu6, valu7, valu8,  : 
  object 'valu1' not found
> scatter.smooth(x=valu1), y=price, main="Scatter plot")
Error: unexpected ',' in "scatter.smooth(x=valu1),"
> scatter.smooth(x=valu2, y=price, main="Scatter plot")
Error in xy.coords(x, y, xlabel, ylabel) : object 'valu2' not found
> valu2
Error: object 'valu2' not found
>     head(Data)
           make price mpg headroom trunk weight length turn displacement gear_ratio num
1   AMC Concord  4099  22      2.5    11   2930    186   40          121       3.58   1
2     AMC Pacer  4749  17      3.0    11   3350    173   40          258       2.53   2
3    AMC Spirit  3799  22      3.0    12   2640    168   35          121       3.08   3
4 Buick Century  4816  20      4.5    16   3250    196   40          196       2.93   4
5 Buick Electra  7827  15      4.0    20   4080    222   43          350       2.41   5
6 Buick LeSabre  5788  18      4.0    21   3670    218   43          231       2.73   6
> 
>     values=x
>   shapiro.test(values[,1])

	Shapiro-Wilk normality test

data:  values[, 1]
W = 0.76696, p-value = 1.724e-09

>   
>  powerTransform(values[,1])	
Estimated transformation parameter 
values[, 1] 
  -4.636039 
>   lam= -0.3533898 
> valu1=  boxcoxTransform(values[,1],lam)
>   shapiro.test(valu1)

	Shapiro-Wilk normality test

data:  valu1
W = 0.83243, p-value = 1.056e-07

>   
>   
>   
>   shapiro.test(log(values[,2]))

	Shapiro-Wilk normality test

data:  log(values[, 2])
W = 0.97248, p-value = 0.1059

>   powerTransform(values[,2])	
Estimated transformation parameter 
values[, 2] 
  -1.405877 
>   lam=   0.6197182 
> valu2=  boxcoxTransform(values[,2],lam) 
>     shapiro.test(valu2)

	Shapiro-Wilk normality test

data:  valu2
W = 0.95479, p-value = 0.009866

> ks.test(valu2,pnorm,mean(valu2),sd(valu2))

	One-sample Kolmogorov-Smirnov test

data:  valu2
D = 0.12182, p-value = 0.2221
alternative hypothesis: two-sided

Warning message:
In ks.test(valu2, pnorm, mean(valu2), sd(valu2)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
>   
>    powerTransform(values[,3])	
Estimated transformation parameter 
values[, 3] 
  0.4505607 
>   lam= 0.8142939
> valu3=  boxcoxTransform(values[,3],lam)
>   shapiro.test(valu3)

	Shapiro-Wilk normality test

data:  valu3
W = 0.95347, p-value = 0.008333

> 
> 
> shapiro.test(values[,4])

	Shapiro-Wilk normality test

data:  values[, 4]
W = 0.97119, p-value = 0.08879

>   shapiro.test(log(values[,4]))

	Shapiro-Wilk normality test

data:  log(values[, 4])
W = 0.96733, p-value = 0.05231

>   powerTransform(values[,4])	
Estimated transformation parameter 
values[, 4] 
  0.7745239 
>   lam=   0.5026624
> valu4=  boxcoxTransform(values[,4],lam) 
>     shapiro.test(valu4)

	Shapiro-Wilk normality test

data:  valu4
W = 0.97081, p-value = 0.08426

> ks.test(valu4,pnorm,mean(valu4),sd(valu4))

	One-sample Kolmogorov-Smirnov test

data:  valu4
D = 0.12777, p-value = 0.1784
alternative hypothesis: two-sided

Warning message:
In ks.test(valu4, pnorm, mean(valu4), sd(valu4)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> i=5
> shapiro.test(values[,i])

	Shapiro-Wilk normality test

data:  values[, i]
W = 0.96159, p-value = 0.02411

> valu5=values[,5]
> 
> 
> i=6
> shapiro.test(values[,i])

	Shapiro-Wilk normality test

data:  values[, i]
W = 0.97087, p-value = 0.08502

>   shapiro.test(log(values[,i]))

	Shapiro-Wilk normality test

data:  log(values[, i])
W = 0.96518, p-value = 0.03909

>   powerTransform(values[,i])	
Estimated transformation parameter 
values[, i] 
  0.9592916 
>   lam=     0.2986733 
> valu6=  boxcoxTransform(values[,i],lam) 
>     shapiro.test(valu6)

	Shapiro-Wilk normality test

data:  valu6
W = 0.96804, p-value = 0.05765

> ks.test(valu6,pnorm,mean(valu6),sd(valu6))

	One-sample Kolmogorov-Smirnov test

data:  valu6
D = 0.12078, p-value = 0.2306
alternative hypothesis: two-sided

Warning message:
In ks.test(valu6, pnorm, mean(valu6), sd(valu6)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> i=7
> shapiro.test(values[,i])

	Shapiro-Wilk normality test

data:  values[, i]
W = 0.96168, p-value = 0.02437

>   shapiro.test(log(values[,i]))

	Shapiro-Wilk normality test

data:  log(values[, i])
W = 0.96053, p-value = 0.02092

>   powerTransform(values[,i])	
Estimated transformation parameter 
values[, i] 
   0.450517 
>   lam=    0.001216884
> valu7=  boxcoxTransform(values[,i],lam) 
>     shapiro.test(valu7)

	Shapiro-Wilk normality test

data:  valu7
W = 0.96054, p-value = 0.02094

> ks.test(valu7,pnorm,mean(valu7),sd(valu7))

	One-sample Kolmogorov-Smirnov test

data:  valu7
D = 0.13934, p-value = 0.113
alternative hypothesis: two-sided

Warning message:
In ks.test(valu7, pnorm, mean(valu7), sd(valu7)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> i=8
> shapiro.test(values[,i])

	Shapiro-Wilk normality test

data:  values[, i]
W = 0.91809, p-value = 0.0001429

>   shapiro.test(log(values[,i]))

	Shapiro-Wilk normality test

data:  log(values[, i])
W = 0.9329, p-value = 0.0007047

>   powerTransform(values[,i])	
Estimated transformation parameter 
values[, i] 
  -1.045139 
>   lam=   0.09708738
> valu8=  boxcoxTransform(values[,i],lam) 
>     shapiro.test(valu8)

	Shapiro-Wilk normality test

data:  valu8
W = 0.93199, p-value = 0.0006363

> ks.test(valu8,pnorm,mean(valu8),sd(valu8))

	One-sample Kolmogorov-Smirnov test

data:  valu8
D = 0.12166, p-value = 0.2234
alternative hypothesis: two-sided

Warning message:
In ks.test(valu8, pnorm, mean(valu8), sd(valu8)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> i=9
> shapiro.test(values[,i])

	Shapiro-Wilk normality test

data:  values[, i]
W = 0.95452, p-value = 0.009533

>   shapiro.test(log(values[,i]))

	Shapiro-Wilk normality test

data:  log(values[, i])
W = 0.96202, p-value = 0.02552

>   powerTransform(values[,i])	
Estimated transformation parameter 
values[, i] 
   0.224425 
>   lam=    0.7186669
> valu9=  boxcoxTransform(values[,i],lam) 
>     shapiro.test(valu9)

	Shapiro-Wilk normality test

data:  valu9
W = 0.95813, p-value = 0.01524

> ks.test(valu9,pnorm,mean(valu9),sd(valu9))

	One-sample Kolmogorov-Smirnov test

data:  valu9
D = 0.10916, p-value = 0.3411
alternative hypothesis: two-sided

Warning message:
In ks.test(valu9, pnorm, mean(valu9), sd(valu9)) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> i=9
> ks.test(values[,i],pnorm,mean(values[,i]),sd(values[,i]))

	One-sample Kolmogorov-Smirnov test

data:  values[, i]
D = 0.11892, p-value = 0.2462
alternative hypothesis: two-sided

Warning message:
In ks.test(values[, i], pnorm, mean(values[, i]), sd(values[, i])) :
  ties should not be present for the Kolmogorov-Smirnov test
> 
> values=data.frame(log(Consumption),log(Investment),log(Governmemt_expenditure),log(Population_000s))
Error in data.frame(log(Consumption), log(Investment), log(Governmemt_expenditure),  : 
  object 'Consumption' not found
> 
> 
> 
> shapiro.test(price)

	Shapiro-Wilk normality test

data:  price
W = 0.96707, p-value = 0.05052

>   shapiro.test(log(values[,i]))

	Shapiro-Wilk normality test

data:  log(values[, i])
W = 0.96202, p-value = 0.02552

>   powerTransform(price)	
Error in qr.resid(xqr, w * fam(Y, lambda, j = TRUE, ...)) : 
  NA/NaN/Inf in foreign function call (arg 5)
>   lam= -1.436082     
> price=  boxcoxTransform(price,lam) 
>     shapiro.test(price)

	Shapiro-Wilk normality test

data:  price
W = 0.96707, p-value = 0.05052

> ks.test(price,pnorm,mean(price),sd(price))

	One-sample Kolmogorov-Smirnov test

data:  price
D = 0.079854, p-value = 0.7026
alternative hypothesis: two-sided

> 
> scatter.smooth(x=valu1), y=price, main="Scatter plot")
Error: unexpected ',' in "scatter.smooth(x=valu1),"
> scatter.smooth(x=valu1, y=price, main="Scatter plot")
> scatter.smooth(x=valu2, y=price, main="Scatter plot")
> scatter.smooth(x=valu3, y=price, main="Scatter plot")
> scatter.smooth(x=valu4, y=price, main="Scatter plot")
> scatter.smooth(x=valu3, y=price, main="Scatter plot")
> scatter.smooth(x=valu5, y=price, main="Scatter plot")
> scatter.smooth(x=valu6, y=price, main="Scatter plot")
> scatter.smooth(x=valu7, y=price, main="Scatter plot")
> scatter.smooth(x=valu8, y=price, main="Scatter plot")
> scatter.smooth(x=valu7, y=price, main="Scatter plot")
> scatter.smooth(x=valu6, y=price, main="Scatter plot")
> scatter.smooth(x=valu5, y=price, main="Scatter plot")
> scatter.smooth(x=valu4, y=price, main="Scatter plot")
> scatter.smooth(x=valu3, y=price, main="Scatter plot")
> scatter.smooth(x=valu2, y=price, main="Scatter plot")
> scatter.smooth(x=valu1, y=price, main="Scatter plot")
> scatter.smooth(x=valu2, y=price, main="Scatter plot")
> valuesbox=data.frame(valu1,valu2,valu3,valu4,valu5,valu6,valu7,valu8,valu9)
>     correlationanalisis(valuesbox)
>  fit<-factanal(valuesbox,3,method="ml",scores="regression",rotation="varimax")
> fit

Call:
factanal(x = valuesbox, factors = 3, scores = "regression", rotation = "varimax",     method = "ml")

Uniquenesses:
valu1 valu2 valu3 valu4 valu5 valu6 valu7 valu8 valu9 
0.711 0.299 0.162 0.335 0.036 0.061 0.245 0.033 0.259 

Loadings:
      Factor1 Factor2 Factor3
valu1  0.480           0.241 
valu2 -0.711  -0.307  -0.318 
valu3  0.120   0.889   0.183 
valu4  0.463   0.644   0.190 
valu5  0.794   0.335   0.471 
valu6  0.817   0.392   0.345 
valu7  0.734   0.302   0.354 
valu8  0.571   0.314   0.737 
valu9 -0.449  -0.232  -0.697 

               Factor1 Factor2 Factor3
SS loadings      3.328   1.809   1.723
Proportion Var   0.370   0.201   0.191
Cumulative Var   0.370   0.571   0.762

Test of the hypothesis that 3 factors are sufficient.
The chi square statistic is 24.31 on 12 degrees of freedom.
The p-value is 0.0184 
> fa.parallel(valuesbox)         
Parallel analysis suggests that the number of factors =  1  and the number of components =  1 
>  fit<-factanal(valuesbox,1,method="ml",scores="regression",rotation="varimax")
> fit

Call:
factanal(x = valuesbox, factors = 1, scores = "regression", rotation = "varimax",     method = "ml")

Uniquenesses:
valu1 valu2 valu3 valu4 valu5 valu6 valu7 valu8 valu9 
0.732 0.310 0.745 0.524 0.026 0.093 0.256 0.167 0.399 

Loadings:
      Factor1
valu1  0.517 
valu2 -0.831 
valu3  0.505 
valu4  0.690 
valu5  0.987 
valu6  0.953 
valu7  0.863 
valu8  0.913 
valu9 -0.775 

               Factor1
SS loadings      5.749
Proportion Var   0.639

Test of the hypothesis that 1 factor is sufficient.
The chi square statistic is 81.37 on 27 degrees of freedom.
The p-value is 2.34e-07 
> scores<-fit$scores
> scores
          Factor1
 [1,] -0.21529820
 [2,]  0.27934138
 [3,] -0.60987166
 [4,]  0.30574196
 [5,]  1.41144723
 [6,]  0.90736193
 [7,] -0.77920323
 [8,]  0.35082346
 [9,]  0.99801362
[10,]  0.47675340
[11,]  1.70002416
[12,]  1.17152913
[13,]  1.42641826
[14,] -1.04081266
[15,]  0.92526824
[16,]  0.09129882
[17,]  0.29378127
[18,] -0.36594619
[19,]  0.54426401
[20,] -1.21614795
[21,]  0.87134002
[22,]  0.89680117
[23,]  1.00366817
[24,] -1.60334007
[25,] -0.40548827
[26,]  2.23577358
[27,]  2.06977274
[28,]  1.00578668
[29,] -0.56482500
[30,]  1.35029013
[31,]  1.04411997
[32,]  0.50464687
[33,]  1.34873354
[34,] -0.08684476
[35,]  1.33914215
[36,]  0.40215945
[37,]  0.42409107
[38,]  0.90335311
[39,]  0.48202427
[40,] -0.35473444
[41,]  1.24851699
[42,] -0.08820483
[43,] -1.47402382
[44,] -0.99111148
[45,] -0.64456770
[46,]  0.47506656
[47,]  0.88994034
[48,]  0.47252012
[49,]  0.37604520
[50,]  0.32008372
[51,]  0.52632774
[52,] -0.39901366
[53,] -0.18499030
[54,] -1.07794548
[55,] -0.58526891
[56,] -0.91237028
[57,] -1.38402149
[58,] -0.96452556
[59,] -0.35858625
[60,] -1.07558725
[61,] -0.91894486
[62,] -1.62845788
[63,] -1.42817040
[64,]  0.36616858
[65,] -1.63623725
[66,] -1.28068160
[67,] -0.66892732
[68,] -1.10458011
[69,] -0.47586899
[70,] -1.01595301
[71,] -1.39272919
[72,] -1.37440204
[73,] -1.29171819
[74,]  0.16096124
> simple_mpg <- lm(price ~ values[,2]+values[,3]+values[,4]+values[,6]+values[,8]) 
> summary(simple_mpg)

Call:
lm(formula = price ~ values[, 2] + values[, 3] + values[, 4] + 
    values[, 6] + values[, 8])

Residuals:
       Min         1Q     Median         3Q        Max 
-7.177e-06 -1.859e-06 -3.519e-07  2.016e-06  5.596e-06 

Coefficients:
              Estimate Std. Error    t value Pr(>|t|)    
(Intercept) -4.746e-01  6.782e-06 -69979.691   <2e-16 ***
values[, 2] -5.087e-06  2.771e-06     -1.835   0.0708 .  
values[, 3] -4.720e-06  1.848e-06     -2.554   0.0129 *  
values[, 4]  4.529e-06  2.333e-06      1.941   0.0564 .  
values[, 6]  3.513e-07  3.236e-06      0.109   0.9139    
values[, 8]  2.157e-06  2.305e-06      0.936   0.3528    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.839e-06 on 68 degrees of freedom
Multiple R-squared:  0.3311,	Adjusted R-squared:  0.2819 
F-statistic: 6.733 on 5 and 68 DF,  p-value: 3.765e-05

> valuesbox=data.frame(valu1,valu2,valu3,valu4,valu6,valu8)
> simple_mpg <- lm(price ~ values[,2]+values[,3]+values[,4]+values[,6]+values[,8]) 
> summary(simple_mpg)

Call:
lm(formula = price ~ values[, 2] + values[, 3] + values[, 4] + 
    values[, 6] + values[, 8])

Residuals:
       Min         1Q     Median         3Q        Max 
-7.177e-06 -1.859e-06 -3.519e-07  2.016e-06  5.596e-06 

Coefficients:
              Estimate Std. Error    t value Pr(>|t|)    
(Intercept) -4.746e-01  6.782e-06 -69979.691   <2e-16 ***
values[, 2] -5.087e-06  2.771e-06     -1.835   0.0708 .  
values[, 3] -4.720e-06  1.848e-06     -2.554   0.0129 *  
values[, 4]  4.529e-06  2.333e-06      1.941   0.0564 .  
values[, 6]  3.513e-07  3.236e-06      0.109   0.9139    
values[, 8]  2.157e-06  2.305e-06      0.936   0.3528    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.839e-06 on 68 degrees of freedom
Multiple R-squared:  0.3311,	Adjusted R-squared:  0.2819 
F-statistic: 6.733 on 5 and 68 DF,  p-value: 3.765e-05

> values
      price      mpg headroom    trunk   weight   length turn displacement gear_ratio      num
1  1.064051 1.344828 1.285714 1.333333 1.379870 1.483516 1.45     1.121387   1.817647 1.000000
2  1.115577 1.172414 1.428571 1.333333 1.516234 1.340659 1.45     1.517341   1.200000 1.013699
3  1.040270 1.344828 1.428571 1.388889 1.285714 1.285714 1.20     1.121387   1.523529 1.027397
4  1.120888 1.275862 1.857143 1.611111 1.483766 1.593407 1.45     1.338150   1.435294 1.041096
5  1.359572 1.103448 1.714286 1.833333 1.753247 1.879121 1.60     1.783237   1.129412 1.054795
6  1.197939 1.206897 1.714286 1.888889 1.620130 1.835165 1.60     1.439306   1.317647 1.068493
7  1.092113 1.482759 1.428571 1.277778 1.152597 1.307692 1.15     1.650289   1.400000 1.082192
8  1.150456 1.275862 1.142857 1.611111 1.493506 1.637363 1.55     1.338150   1.435294 1.095890
9  1.561316 1.137931 1.571429 1.666667 1.688312 1.714286 1.60     1.439306   1.435294 1.109589
10 1.062703 1.241379 1.571429 1.444444 1.532468 1.637363 1.55     1.439306   1.523529 1.123288
11 1.641617 1.068966 1.714286 1.833333 1.834416 1.868132 1.65     2.000000   1.052941 1.136986
12 1.888545 1.068966 1.571429 1.611111 1.694805 1.681319 1.60     1.783237   1.000000 1.150685
13 2.000000 1.310345 1.428571 1.444444 1.821429 1.681319 1.70     1.783237   1.029412 1.164384
14 1.000634 1.586207 1.285714 1.222222 1.113636 1.230769 1.15     1.439306   1.435294 1.178082
15 1.191359 1.137931 1.714286 1.833333 1.626623 1.769231 1.60     1.494220   1.217647 1.191781
16 1.096155 1.344828 1.571429 1.666667 1.461039 1.560440 1.00     1.349711   1.317647 1.205479
17 1.143718 1.344828 1.142857 1.611111 1.474026 1.637363 1.50     1.349711   1.317647 1.219178
18 1.029806 1.413793 1.142857 1.111111 1.321429 1.406593 1.45     1.208092   1.317647 1.232877
19 1.052636 1.241379 1.571429 1.444444 1.542208 1.604396 1.60     1.494220   1.217647 1.246575
20 1.054935 1.620690 1.142857 1.166667 1.116883 1.230769 1.20     1.054913   1.794118 1.260274
21 1.056996 1.206897 1.714286 1.666667 1.597403 1.703297 1.75     1.690751   1.164706 1.273973
22 1.205707 1.137931 1.714286 1.666667 1.597403 1.703297 1.75     1.690751   1.164706 1.287671
23 1.241855 1.172414 1.857143 1.888889 1.642857 1.857143 1.75     1.421965   1.441176 1.301370
24 1.087039 1.551724 1.000000 1.222222 1.012987 1.054945 1.10     1.054913   1.564706 1.315068
25 1.071027 1.310345 1.142857 1.277778 1.288961 1.406593 1.60     1.176301   1.523529 1.328767
26 1.650495 1.000000 1.571429 1.944444 2.000000 2.000000 2.00     1.927746   1.164706 1.342466
27 1.816726 1.000000 1.285714 1.722222 1.961039 1.967033 1.85     1.927746   1.164706 1.356164
28 1.806579 1.068966 1.571429 1.555556 1.672078 1.648352 1.50     1.644509   1.164706 1.369863
29 1.042648 1.344828 1.428571 1.222222 1.266234 1.296703 1.40     1.176301   1.317647 1.383562
30 1.165517 1.068966 1.571429 1.611111 1.746753 1.868132 1.85     1.644509   1.329412 1.397260
31 1.227824 1.103448 1.571429 2.000000 1.636364 1.769231 1.65     1.644509   1.041176 1.410959
32 1.097107 1.206897 1.428571 1.555556 1.522727 1.615385 1.50     1.494220   1.141176 1.424658
33 1.238763 1.068966 1.428571 1.611111 1.769481 1.824176 1.70     1.644509   1.329412 1.438356
34 1.000000 1.275862 1.571429 1.666667 1.347403 1.582418 1.60     1.176301   1.523529 1.452055
35 1.437812 1.310345 1.714286 1.833333 1.746753 1.857143 1.60     1.783237   1.129412 1.465753
36 1.149108 1.241379 1.142857 1.611111 1.503247 1.615385 1.55     1.439306   1.435294 1.479452
37 1.114308 1.241379 1.857143 1.611111 1.500000 1.615385 1.55     1.439306   1.435294 1.493151
38 1.126754 1.206897 1.714286 1.833333 1.626623 1.835165 1.55     1.439306   1.317647 1.506849
39 1.070551 1.241379 1.857143 1.500000 1.522727 1.637363 1.60     1.439306   1.523529 1.520548
40 1.071661 1.413793 1.142857 1.277778 1.314935 1.417582 1.45     1.208092   1.317647 1.534247
41 1.561237 1.137931 1.571429 1.666667 1.737013 1.703297 1.60     1.783237   1.129412 1.547945
42 1.107491 1.551724 1.142857 1.333333 1.487013 1.307692 1.30     1.222543   1.505882 1.561644
43 1.089893 1.758621 1.285714 1.333333 1.012987 1.164835 1.30     1.020231   1.458824 1.575342
44 1.094411 1.448276 1.714286 1.666667 1.142857 1.252747 1.25     1.075145   1.694118 1.589041
45 1.253270 1.482759 1.000000 1.166667 1.246753 1.439560 1.35     1.115607   1.794118 1.602740
46 1.060959 1.206897 2.000000 1.611111 1.509740 1.648352 1.65     1.421965   1.611765 1.616438
47 1.198732 1.206897 1.714286 1.833333 1.629870 1.791209 1.55     1.439306   1.317647 1.630137
48 1.130242 1.206897 1.000000 1.111111 1.555195 1.615385 1.55     1.439306   1.523529 1.643836
49 1.153072 1.241379 1.142857 1.611111 1.470779 1.648352 1.70     1.439306   1.435294 1.657534
50 1.113516 1.241379 1.571429 1.666667 1.467532 1.626374 1.45     1.439306   1.435294 1.671233
51 1.089814 1.241379 1.571429 1.444444 1.538961 1.670330 1.60     1.439306   1.523529 1.684932
52 1.069837 1.413793 1.142857 1.111111 1.301948 1.406593 1.50     1.208092   1.317647 1.698630
53 1.507253 1.172414 1.428571 1.555556 1.347403 1.516484 1.30     1.150289   1.594118 1.712329
54 1.238129 1.379310 1.285714 1.333333 1.100649 1.351648 1.25     1.052023   1.888235 1.726027
55 1.510820 1.448276 1.285714 1.388889 1.288961 1.384615 1.15     1.121387   1.852941 1.739726
56 1.232897 1.379310 1.000000 1.055556 1.198052 1.307692 1.20     1.115607   2.000000 1.753425
57 1.102893 1.793103 1.142857 1.166667 1.084416 1.252747 1.05     1.017341   1.888235 1.767123
58 1.141736 1.413793 1.285714 1.166667 1.168831 1.307692 1.15     1.115607   1.794118 1.780822
59 1.383512 1.310345 1.285714 1.166667 1.321429 1.461538 1.35     1.193642   1.800000 1.794521
60 1.079667 1.310345 1.285714 1.611111 1.120130 1.208791 1.25     1.075145   1.694118 1.808219
61 1.198811 1.448276 1.428571 1.277778 1.155844 1.329670 1.25     1.080925   1.505882 1.821918
62 1.095759 1.551724 1.285714 1.000000 1.000000 1.076923 1.15     1.034682   1.652941 1.835616
63 1.055807 1.620690 1.571429 1.333333 1.071429 1.131868 1.10     1.020231   1.905882 1.849315
64 1.768847 1.068966 1.571429 1.500000 1.538961 1.549451 1.35     1.242775   1.817647 1.863014
65 1.047880 1.482759 1.428571 1.277778 1.022727 1.000000 1.15     1.000000   1.900000 1.876712
66 1.040190 1.793103 1.285714 1.333333 1.094156 1.241758 1.25     1.052023   1.952941 1.890411
67 1.206738 1.206897 1.285714 1.500000 1.211039 1.351648 1.25     1.158960   1.511765 1.904110
68 1.036227 1.655172 1.428571 1.222222 1.142857 1.252747 1.20     1.052023   1.600000 1.917808
69 1.192469 1.206897 1.142857 1.333333 1.295455 1.362637 1.25     1.158960   1.505882 1.931507
70 1.305113 1.379310 1.285714 1.388889 1.129870 1.329670 1.25     1.052023   1.911765 1.945205
71 1.166944 2.000000 1.428571 1.555556 1.090909 1.142857 1.20     1.031792   1.935294 1.958904
72 1.111455 1.448276 1.428571 1.555556 1.055195 1.142857 1.20     1.028902   1.935294 1.972603
73 1.282124 1.448276 1.142857 1.611111 1.074675 1.153846 1.25     1.052023   1.935294 1.986301
74 1.689972 1.172414 1.285714 1.500000 1.457792 1.560440 1.30     1.242775   1.464706 2.000000
> valuesbox=data.frame(valu1,valu2,valu3,valu4,valu5,valu6,valu7,valu8,valu9)
>     correlationanalisis(valuesbox)
> valu9
 [1] 0.74636536 0.19480546 0.49166869 0.41263471 0.12717731 0.30509001 0.38064095 0.41263471 0.41263471
[10] 0.49166869 0.05255558 0.00000000 0.02929158 0.41263471 0.21153570 0.30509001 0.30509001 0.30509001
[19] 0.21153570 0.72644043 0.16113555 0.16113555 0.41794537 0.52810813 0.49166869 0.16113555 0.16113555
[28] 0.16113555 0.30509001 0.31596262 0.04094207 0.13852946 0.31596262 0.49166869 0.12717731 0.41263471
[37] 0.41263471 0.30509001 0.49166869 0.30509001 0.12717731 0.47596720 0.43384090 0.64092230 0.72644043
[46] 0.56942456 0.30509001 0.49166869 0.41263471 0.41263471 0.49166869 0.30509001 0.55397120 0.80571027
[55] 0.77611733 0.89841439 0.80571027 0.72644043 0.73142852 0.64092230 0.47596720 0.60529872 0.82044830
[64] 0.74636536 0.81553991 0.85956350 0.48120675 0.55912764 0.47596720 0.82535244 0.84492671 0.84492671
[73] 0.84492671 0.43912737
> values[,i]
 [1] 1.817647 1.200000 1.523529 1.435294 1.129412 1.317647 1.400000 1.435294 1.435294 1.523529 1.052941 1.000000
[13] 1.029412 1.435294 1.217647 1.317647 1.317647 1.317647 1.217647 1.794118 1.164706 1.164706 1.441176 1.564706
[25] 1.523529 1.164706 1.164706 1.164706 1.317647 1.329412 1.041176 1.141176 1.329412 1.523529 1.129412 1.435294
[37] 1.435294 1.317647 1.523529 1.317647 1.129412 1.505882 1.458824 1.694118 1.794118 1.611765 1.317647 1.523529
[49] 1.435294 1.435294 1.523529 1.317647 1.594118 1.888235 1.852941 2.000000 1.888235 1.794118 1.800000 1.694118
[61] 1.505882 1.652941 1.905882 1.817647 1.900000 1.952941 1.511765 1.600000 1.505882 1.911765 1.935294 1.935294
[73] 1.935294 1.464706
> x
      price      mpg headroom    trunk   weight   length turn displacement gear_ratio      num
1  1.064051 1.344828 1.285714 1.333333 1.379870 1.483516 1.45     1.121387   1.817647 1.000000
2  1.115577 1.172414 1.428571 1.333333 1.516234 1.340659 1.45     1.517341   1.200000 1.013699
3  1.040270 1.344828 1.428571 1.388889 1.285714 1.285714 1.20     1.121387   1.523529 1.027397
4  1.120888 1.275862 1.857143 1.611111 1.483766 1.593407 1.45     1.338150   1.435294 1.041096
5  1.359572 1.103448 1.714286 1.833333 1.753247 1.879121 1.60     1.783237   1.129412 1.054795
6  1.197939 1.206897 1.714286 1.888889 1.620130 1.835165 1.60     1.439306   1.317647 1.068493
7  1.092113 1.482759 1.428571 1.277778 1.152597 1.307692 1.15     1.650289   1.400000 1.082192
8  1.150456 1.275862 1.142857 1.611111 1.493506 1.637363 1.55     1.338150   1.435294 1.095890
9  1.561316 1.137931 1.571429 1.666667 1.688312 1.714286 1.60     1.439306   1.435294 1.109589
10 1.062703 1.241379 1.571429 1.444444 1.532468 1.637363 1.55     1.439306   1.523529 1.123288
11 1.641617 1.068966 1.714286 1.833333 1.834416 1.868132 1.65     2.000000   1.052941 1.136986
12 1.888545 1.068966 1.571429 1.611111 1.694805 1.681319 1.60     1.783237   1.000000 1.150685
13 2.000000 1.310345 1.428571 1.444444 1.821429 1.681319 1.70     1.783237   1.029412 1.164384
14 1.000634 1.586207 1.285714 1.222222 1.113636 1.230769 1.15     1.439306   1.435294 1.178082
15 1.191359 1.137931 1.714286 1.833333 1.626623 1.769231 1.60     1.494220   1.217647 1.191781
16 1.096155 1.344828 1.571429 1.666667 1.461039 1.560440 1.00     1.349711   1.317647 1.205479
17 1.143718 1.344828 1.142857 1.611111 1.474026 1.637363 1.50     1.349711   1.317647 1.219178
18 1.029806 1.413793 1.142857 1.111111 1.321429 1.406593 1.45     1.208092   1.317647 1.232877
19 1.052636 1.241379 1.571429 1.444444 1.542208 1.604396 1.60     1.494220   1.217647 1.246575
20 1.054935 1.620690 1.142857 1.166667 1.116883 1.230769 1.20     1.054913   1.794118 1.260274
21 1.056996 1.206897 1.714286 1.666667 1.597403 1.703297 1.75     1.690751   1.164706 1.273973
22 1.205707 1.137931 1.714286 1.666667 1.597403 1.703297 1.75     1.690751   1.164706 1.287671
23 1.241855 1.172414 1.857143 1.888889 1.642857 1.857143 1.75     1.421965   1.441176 1.301370
24 1.087039 1.551724 1.000000 1.222222 1.012987 1.054945 1.10     1.054913   1.564706 1.315068
25 1.071027 1.310345 1.142857 1.277778 1.288961 1.406593 1.60     1.176301   1.523529 1.328767
26 1.650495 1.000000 1.571429 1.944444 2.000000 2.000000 2.00     1.927746   1.164706 1.342466
27 1.816726 1.000000 1.285714 1.722222 1.961039 1.967033 1.85     1.927746   1.164706 1.356164
28 1.806579 1.068966 1.571429 1.555556 1.672078 1.648352 1.50     1.644509   1.164706 1.369863
29 1.042648 1.344828 1.428571 1.222222 1.266234 1.296703 1.40     1.176301   1.317647 1.383562
30 1.165517 1.068966 1.571429 1.611111 1.746753 1.868132 1.85     1.644509   1.329412 1.397260
31 1.227824 1.103448 1.571429 2.000000 1.636364 1.769231 1.65     1.644509   1.041176 1.410959
32 1.097107 1.206897 1.428571 1.555556 1.522727 1.615385 1.50     1.494220   1.141176 1.424658
33 1.238763 1.068966 1.428571 1.611111 1.769481 1.824176 1.70     1.644509   1.329412 1.438356
34 1.000000 1.275862 1.571429 1.666667 1.347403 1.582418 1.60     1.176301   1.523529 1.452055
35 1.437812 1.310345 1.714286 1.833333 1.746753 1.857143 1.60     1.783237   1.129412 1.465753
36 1.149108 1.241379 1.142857 1.611111 1.503247 1.615385 1.55     1.439306   1.435294 1.479452
37 1.114308 1.241379 1.857143 1.611111 1.500000 1.615385 1.55     1.439306   1.435294 1.493151
38 1.126754 1.206897 1.714286 1.833333 1.626623 1.835165 1.55     1.439306   1.317647 1.506849
39 1.070551 1.241379 1.857143 1.500000 1.522727 1.637363 1.60     1.439306   1.523529 1.520548
40 1.071661 1.413793 1.142857 1.277778 1.314935 1.417582 1.45     1.208092   1.317647 1.534247
41 1.561237 1.137931 1.571429 1.666667 1.737013 1.703297 1.60     1.783237   1.129412 1.547945
42 1.107491 1.551724 1.142857 1.333333 1.487013 1.307692 1.30     1.222543   1.505882 1.561644
43 1.089893 1.758621 1.285714 1.333333 1.012987 1.164835 1.30     1.020231   1.458824 1.575342
44 1.094411 1.448276 1.714286 1.666667 1.142857 1.252747 1.25     1.075145   1.694118 1.589041
45 1.253270 1.482759 1.000000 1.166667 1.246753 1.439560 1.35     1.115607   1.794118 1.602740
46 1.060959 1.206897 2.000000 1.611111 1.509740 1.648352 1.65     1.421965   1.611765 1.616438
47 1.198732 1.206897 1.714286 1.833333 1.629870 1.791209 1.55     1.439306   1.317647 1.630137
48 1.130242 1.206897 1.000000 1.111111 1.555195 1.615385 1.55     1.439306   1.523529 1.643836
49 1.153072 1.241379 1.142857 1.611111 1.470779 1.648352 1.70     1.439306   1.435294 1.657534
50 1.113516 1.241379 1.571429 1.666667 1.467532 1.626374 1.45     1.439306   1.435294 1.671233
51 1.089814 1.241379 1.571429 1.444444 1.538961 1.670330 1.60     1.439306   1.523529 1.684932
52 1.069837 1.413793 1.142857 1.111111 1.301948 1.406593 1.50     1.208092   1.317647 1.698630
53 1.507253 1.172414 1.428571 1.555556 1.347403 1.516484 1.30     1.150289   1.594118 1.712329
54 1.238129 1.379310 1.285714 1.333333 1.100649 1.351648 1.25     1.052023   1.888235 1.726027
55 1.510820 1.448276 1.285714 1.388889 1.288961 1.384615 1.15     1.121387   1.852941 1.739726
56 1.232897 1.379310 1.000000 1.055556 1.198052 1.307692 1.20     1.115607   2.000000 1.753425
57 1.102893 1.793103 1.142857 1.166667 1.084416 1.252747 1.05     1.017341   1.888235 1.767123
58 1.141736 1.413793 1.285714 1.166667 1.168831 1.307692 1.15     1.115607   1.794118 1.780822
59 1.383512 1.310345 1.285714 1.166667 1.321429 1.461538 1.35     1.193642   1.800000 1.794521
60 1.079667 1.310345 1.285714 1.611111 1.120130 1.208791 1.25     1.075145   1.694118 1.808219
61 1.198811 1.448276 1.428571 1.277778 1.155844 1.329670 1.25     1.080925   1.505882 1.821918
62 1.095759 1.551724 1.285714 1.000000 1.000000 1.076923 1.15     1.034682   1.652941 1.835616
63 1.055807 1.620690 1.571429 1.333333 1.071429 1.131868 1.10     1.020231   1.905882 1.849315
64 1.768847 1.068966 1.571429 1.500000 1.538961 1.549451 1.35     1.242775   1.817647 1.863014
65 1.047880 1.482759 1.428571 1.277778 1.022727 1.000000 1.15     1.000000   1.900000 1.876712
66 1.040190 1.793103 1.285714 1.333333 1.094156 1.241758 1.25     1.052023   1.952941 1.890411
67 1.206738 1.206897 1.285714 1.500000 1.211039 1.351648 1.25     1.158960   1.511765 1.904110
68 1.036227 1.655172 1.428571 1.222222 1.142857 1.252747 1.20     1.052023   1.600000 1.917808
69 1.192469 1.206897 1.142857 1.333333 1.295455 1.362637 1.25     1.158960   1.505882 1.931507
70 1.305113 1.379310 1.285714 1.388889 1.129870 1.329670 1.25     1.052023   1.911765 1.945205
71 1.166944 2.000000 1.428571 1.555556 1.090909 1.142857 1.20     1.031792   1.935294 1.958904
72 1.111455 1.448276 1.428571 1.555556 1.055195 1.142857 1.20     1.028902   1.935294 1.972603
73 1.282124 1.448276 1.142857 1.611111 1.074675 1.153846 1.25     1.052023   1.935294 1.986301
74 1.689972 1.172414 1.285714 1.500000 1.457792 1.560440 1.30     1.242775   1.464706 2.000000
> valuesbox=data.frame(valu1,valu2,valu3,valu4,valu5,valu6,valu7,valu8)
>     correlationanalisis(valuesbox)
>     summary(valuesbox)
     valu1             valu2            valu3            valu4            valu5           valu6       
 Min.   :0.00000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :1.000   Min.   :0.0000  
 1st Qu.:0.07018   1st Qu.:0.1994   1st Qu.:0.2789   1st Qu.:0.2730   1st Qu.:1.159   1st Qu.:0.2793  
 Median :0.12466   Median :0.2630   Median :0.4139   Median :0.4497   Median :1.464   Median :0.4719  
 Mean   :0.17920   Mean   :0.2986   Mean   :0.4085   Mean   :0.4309   Mean   :1.409   Mean   :0.4240  
 3rd Qu.:0.20795   3rd Qu.:0.4088   3rd Qu.:0.5464   3rd Qu.:0.5715   3rd Qu.:1.597   3rd Qu.:0.5601  
 Max.   :0.61478   Max.   :0.8658   Max.   :0.9314   Max.   :0.8292   Max.   :2.000   Max.   :0.7701  
     valu7            valu8       
 Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.2232   1st Qu.:0.1100  
 Median :0.3716   Median :0.2954  
 Mean   :0.3477   Mean   :0.2811  
 3rd Qu.:0.4701   3rd Qu.:0.3998  
 Max.   :0.6934   Max.   :0.7170  
>     x=valuesbox
> scores
          Factor1
 [1,] -0.21529820
 [2,]  0.27934138
 [3,] -0.60987166
 [4,]  0.30574196
 [5,]  1.41144723
 [6,]  0.90736193
 [7,] -0.77920323
 [8,]  0.35082346
 [9,]  0.99801362
[10,]  0.47675340
[11,]  1.70002416
[12,]  1.17152913
[13,]  1.42641826
[14,] -1.04081266
[15,]  0.92526824
[16,]  0.09129882
[17,]  0.29378127
[18,] -0.36594619
[19,]  0.54426401
[20,] -1.21614795
[21,]  0.87134002
[22,]  0.89680117
[23,]  1.00366817
[24,] -1.60334007
[25,] -0.40548827
[26,]  2.23577358
[27,]  2.06977274
[28,]  1.00578668
[29,] -0.56482500
[30,]  1.35029013
[31,]  1.04411997
[32,]  0.50464687
[33,]  1.34873354
[34,] -0.08684476
[35,]  1.33914215
[36,]  0.40215945
[37,]  0.42409107
[38,]  0.90335311
[39,]  0.48202427
[40,] -0.35473444
[41,]  1.24851699
[42,] -0.08820483
[43,] -1.47402382
[44,] -0.99111148
[45,] -0.64456770
[46,]  0.47506656
[47,]  0.88994034
[48,]  0.47252012
[49,]  0.37604520
[50,]  0.32008372
[51,]  0.52632774
[52,] -0.39901366
[53,] -0.18499030
[54,] -1.07794548
[55,] -0.58526891
[56,] -0.91237028
[57,] -1.38402149
[58,] -0.96452556
[59,] -0.35858625
[60,] -1.07558725
[61,] -0.91894486
[62,] -1.62845788
[63,] -1.42817040
[64,]  0.36616858
[65,] -1.63623725
[66,] -1.28068160
[67,] -0.66892732
[68,] -1.10458011
[69,] -0.47586899
[70,] -1.01595301
[71,] -1.39272919
[72,] -1.37440204
[73,] -1.29171819
[74,]  0.16096124
> simple_mpg <- lm(price ~ scores[,1]) 
> summary(simple_mpg)

Call:
lm(formula = price ~ scores[, 1])

Residuals:
       Min         1Q     Median         3Q        Max 
-7.000e-06 -2.038e-06 -4.585e-07  2.394e-06  5.642e-06 

Coefficients:
              Estimate Std. Error    t value Pr(>|t|)    
(Intercept) -4.746e-01  3.393e-07 -1.399e+06  < 2e-16 ***
scores[, 1]  1.692e-06  3.444e-07  4.914e+00 5.43e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.919e-06 on 72 degrees of freedom
Multiple R-squared:  0.2511,	Adjusted R-squared:  0.2407 
F-statistic: 24.14 on 1 and 72 DF,  p-value: 5.428e-06

> 