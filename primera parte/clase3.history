print('dd')
1/sqrt(3)
3(1/sqrt(3))
3*(1/sqrt(3))
sqrt(3*(1/sqrt(3))^2)
install.packages("factoextra")#
library(stats)#
library(psy)#
library(factoextra)#
#cargo los datos#
datos<-read.csv(file=file.choose(),header=T,sep=';')#
head(datos)#
#divido la base de datos#
datos_cont<-datos[,c(3:7)]  ##coja todas las filas, y las columnas de la 3 a la 7 #
head(datos_cont)#
row.names(datos_cont) <- datos[,c(2)]   ##los nombres de filas llevele lo que tengo en dato de la columna 2 para que los  grafique#
#matriz de correlaciones#
corr_matrix<-cor(datos_cont) ## saca matrices de correlaciones #
corr_matrix#
write.csv(corr_matrix, file="correlaciones.csv",sep=';',row.names=FALSE)#
#matriz de covarianza #
cov_matrix<-cov(datos_cont) ## saca matrices de correlaciones #
cov_matrix#
write.csv(cov_matrix, file="covarianza.csv",sep=';',row.names=FALSE) ## escribe un archivo csv si no le guarda csv se guarda con csv2.#
#para probar si una variable tiene distribucion normal , hago la prueba de bondad de ajuste #
# con prueba de shapiro #
#
shapiro.test(Consumption). ## no funciono entonces le indico el numero de la columna#
shapiro.test(datos_cont[,c(1)]).  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal #
ks.test(datos_cont$Consumption ,pnorm). ## Kolmogorov para verificar si es  normal, en este caso no lo es por lo tanto se hace una transformacion de potencia #
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos#
#TAREA: hacer gráfico matriz de correlaciones#
library(corrplot)#
corrplot(datos_cont, method="circle")#
#
#instalar paquetes para corrmatri#
if(!require(devtools)) install.packages("devtools")#
#
#llamar librerias #
> library(ggcorrplot)#
#
#para grafico de correlaciones #
ggcorrplot(corr_matrix)#
#calculo el PCA#
res.pca <- prcomp(datos_cont, scale = TRUE)#
res.pca#
#solicito las tablas#
get_pca_var(res.pca)#
get_eig(res.pca)#tabla de eigenvalores varianza acumulada#
#las gráficas#
plot(res.pca)#
fviz_eig(res.pca)#
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA#
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 100))#screeplot#
fviz_pca_biplot(res.pca, repel = TRUE, addlabels = TRUE) #biplot#
fviz_pca_var(res.pca, col.var = "black") #grafico de pesos de los componentes#
fviz_pca_var(res.pca, col.var="contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)#grafico de pesos de los componentes a color#
fviz_pca_ind(res.pca,label = "none",habillage = nompais,addEllipses = TRUE, palette = "jco")#
#calculo de los componentes#
pred<-predict(res.pca)#
write.csv(pred, file="componentes.csv",sep=';',row.names=FALSE)
library(stats)#
library(psy)#
library(factoextra)#
#cargo los datos#
datos<-read.csv(file=file.choose(),header=T,sep=';')#
head(datos)#
#divido la base de datos#
datos_cont<-datos[,c(3:7)]  ##coja todas las filas, y las columnas de la 3 a la 7 #
head(datos_cont)#
row.names(datos_cont) <- datos[,c(2)]   ##los nombres de filas llevele lo que tengo en dato de la columna 2 para que los  grafique#
#matriz de correlaciones#
corr_matrix<-cor(datos_cont) ## saca matrices de correlaciones #
corr_matrix#
write.csv(corr_matrix, file="correlaciones.csv",sep=';',row.names=FALSE)#
#matriz de covarianza #
cov_matrix<-cov(datos_cont) ## saca matrices de correlaciones #
cov_matrix#
write.csv(cov_matrix, file="covarianza.csv",sep=';',row.names=FALSE) ## escribe un archivo csv si no le guarda csv se guarda con csv2.#
#para probar si una variable tiene distribucion normal , hago la prueba de bondad de ajuste #
# con prueba de shapiro #
#
shapiro.test(Consumption). ## no funciono entonces le indico el numero de la columna#
shapiro.test(datos_cont[,c(1)]).  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal #
ks.test(datos_cont$Consumption ,pnorm). ## Kolmogorov para verificar si es  normal, en este caso no lo es por lo tanto se hace una transformacion de potencia #
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos#
#TAREA: hacer gráfico matriz de correlaciones#
library(corrplot)#
corrplot(datos_cont, method="circle")#
#
#instalar paquetes para corrmatri#
if(!require(devtools)) install.packages("devtools")#
#
#llamar librerias #
> library(ggcorrplot)#
#
#para grafico de correlaciones #
ggcorrplot(corr_matrix)#
#calculo el PCA#
res.pca <- prcomp(datos_cont, scale = TRUE)#
res.pca#
#solicito las tablas#
get_pca_var(res.pca)#
get_eig(res.pca)#tabla de eigenvalores varianza acumulada#
#las gráficas#
plot(res.pca)#
fviz_eig(res.pca)#
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA#
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 100))#screeplot#
fviz_pca_biplot(res.pca, repel = TRUE, addlabels = TRUE) #biplot#
fviz_pca_var(res.pca, col.var = "black") #grafico de pesos de los componentes#
fviz_pca_var(res.pca, col.var="contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)#grafico de pesos de los componentes a color#
fviz_pca_ind(res.pca,label = "none",habillage = nompais,addEllipses = TRUE, palette = "jco")#
#calculo de los componentes#
pred<-predict(res.pca)#
write.csv(pred, file="componentes.csv",sep=';',row.names=FALSE)
head(datos)
datos_cont
head(datos_cont)
datos_cont<-datos[,c(3:7)]  ##coja todas las filas, y las columnas de la 3 a la 7
head(datos_cont)
row.names(datos_cont) <- datos[,c(2)]   ##los nombres de filas llevele lo que tengo en dato de la columna 2 para que los  grafique
corr_matrix<-cor(datos_cont) ## saca matrices de correlaciones
corr_matrix
write.csv(corr_matrix, file="correlaciones.csv",sep=';',row.names=FALSE)
cov_matrix<-cov(datos_cont) ## saca matrices de covarianza
cov_matrix
write.csv(cov_matrix, file="covarianza.csv",sep=';',row.names=FALSE) ## escribe un archivo csv si no le guarda csv se guarda con csv2.
datos_cont[,c(1)]
head(datos_cont[,c(1)])
head(datos_cont)
shapiro.test(datos_cont[,c(1)])  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal
ks.test(datos_cont$Consumption ,pnorm). ## Kolmogorov para verificar si es  normal, en este caso no lo es por lo tanto se hace una transformacion de potencia
ks.test(datos_cont$Consumption ,pnorm) ## Kolmogorov para verificar si es  normal, en este caso no lo es por lo tanto se hace una transformacion de potencia
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos
library(psy)
library(stats)
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos
library(factoextra)
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos
library(powerTransform)
data
shapiro.test(datos_cont[,c(1)])  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos
install.packages("sos")
library(car)
powerTransform(datos_cont[,c(1)]) ## nos dice que la elevemos a un valor de log natural, y lo elevamos
ks.test(datos_cont$Consumption ,pnorm) ## Kolmogorov para verificar si es  normal, en este caso no lo es por lo tanto se hace una transformacion de potencia
shapiro.test(datos_cont[,c(1)])  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal
log(datos_cont[,c(1)])
shapiro.test(log(datos_cont[,c(1)]))  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal
shapiro.test(datos_cont[,c(1)])  ##nos da el valor p, si es menor que 0,05 no es una distribucin normal
library(corrplot)
corrplot(datos_cont, method="circle")
if(!require(devtools)) install.packages("devtools")
> library(ggcorrplot)
library(ggcorrplot)
ggcorrplot(corr_matrix)
covplot(datos_cont, method="circle")
res.pca <- prcomp(datos_cont, scale = TRUE)
res.pca
head(datos_cont)
plot(res.pca)
fviz_eig(res.pca)
library(factoextra)
fviz_eig(res.pca)
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA
fviz_pca_var(res.pca, col.var="contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)#grafico de pesos de los componentes a color
pred<-predict(res.pca)
datos
head(datos_cont)
corr_matrix
res.pca <- prcomp(datos_cont, scale = TRUE)
res.pca
get_pca_var(res.pca)
datosnum
library(stats)#
library(psy)#
library(factoextra)
#cargo los datos#
datos<-read.csv(file=file.choose(),header=T,sep=';')#
attach(datos)#
head(datos)
for (i in 7:35) {.    ##transformar datos a datos positivos #
 datos[i]=datos[i]-min(datos[i])#
  }
for (i in 7:35) {   ##transformar datos a datos positivos
datos[i]=datos[i]-min(datos[i])#
  }
datos[7]=datos[7]-min(datos[7]
Data <- subset( datos, select = -Longitud ). ##saco la var long por que no aporta nada#
Data <- subset( Data, select = -BNT ). ##Saco la var BNT por que no aporta
datos
head(datos)
datos<-read.csv(file=file.choose(),header=T,sep=';')#
attach(datos)#
head(dates)
dates=datos
for (i in 7:35) {   ##transformar datos a datos positivos #
 datos[i]=dates[i]-min(dates[i])#
  }
head(datos)
Data <- subset( datos, select = -Longitud ). ##saco la var long por que no aporta nada#
Data <- subset( Data, select = -BNT ). ##Saco la var BNT por que no aporta
Data <- subset( datos, select = -Longitud ) ##saco la var long por que no aporta nada
Data <- subset( Data, select = -BNT ) ##Saco la var BNT por que no aporta
datanum<-Data[,c(7:33)]
correlationanalisis<-function(datanum){#
corr_matrix<-cor(datanum) ## saca matrices de correlaciones #
corr_matrix#
write.csv(corr_matrix, file="Downloads/correlaciones.csv",sep=';',row.names=FALSE)#
 library(ggcorrplot)#
#
#para grafico de correlaciones #
ggcorrplot(corr_matrix)#
}
correlationanalisis(datanum)
lenght(datanum)
length(datanum)
for(i in 1:length(datanum)){#
	shapiro.test(datanum[,i]) #
}
a[1]+2
a[1]=2
a[]=2
a=2
a[2]=2
a
for(i in 1:length(datanum)){#
	a[i]=shapiro.test(datanum[,i]) #
}
a
dim(a)
length(a)
res.pca <- prcomp(datanum, scale = TRUE)
res.pca
get_pca_var(res.pca)#
get_eig(res.pca)#tabla de eigenvalores varianza acumulada
plot(res.pca)
fviz_eig(res.pca)
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA
pred<-predict(res.pca)
pred
plot(res.pca)
fviz_eig(res.pca)
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA
get_eig(res.pca)#tabla de eigenvalores varianza acumulada
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 100))#screeplot
fviz_pca_biplot(res.pca, repel = TRUE, addlabels = TRUE) #biplot
fviz_pca_var(res.pca, col.var = "black") #grafico de pesos de los componentes
fviz_pca_var(res.pca, col.var="contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)#grafico de pesos de los componentes a color
fviz_pca_ind(res.pca,label = "none",habillage = nompais,addEllipses = TRUE, palette = "jco")
pred<-predict(res.pca)
write.csv(pred, file="componentes.csv",sep=';',row.names=FALSE)
res.pca <- prcomp(datanum, scale = false)
res.pca <- prcomp(datanum, scale = False)
res.pca <- prcomp(datanum, scale = FALSE)
res.pca
get_pca_var(res.pca)
get_eig(res.pca)#tabla de eigenvalores varianza acumulada
fviz_pca_ind(res.pca, repel=TRUE)#gráfico individuos y PCA
write.csv(pred, file="/Downloads/componentes.csv",sep=';',row.names=FALSE)
